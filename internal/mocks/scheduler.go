// Code generated by MockGen. DO NOT EDIT.
// Source: internal/scheduler/scheduler.go
//
// Generated by this command:
//
//	mockgen -source=internal/scheduler/scheduler.go -destination=internal/mocks/scheduler.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSchedulerMessageService is a mock of SchedulerMessageService interface.
type MockSchedulerMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMessageServiceMockRecorder
	isgomock struct{}
}

// MockSchedulerMessageServiceMockRecorder is the mock recorder for MockSchedulerMessageService.
type MockSchedulerMessageServiceMockRecorder struct {
	mock *MockSchedulerMessageService
}

// NewMockSchedulerMessageService creates a new mock instance.
func NewMockSchedulerMessageService(ctrl *gomock.Controller) *MockSchedulerMessageService {
	mock := &MockSchedulerMessageService{ctrl: ctrl}
	mock.recorder = &MockSchedulerMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerMessageService) EXPECT() *MockSchedulerMessageServiceMockRecorder {
	return m.recorder
}

// SendMessages mocks base method.
func (m *MockSchedulerMessageService) SendMessages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessages indicates an expected call of SendMessages.
func (mr *MockSchedulerMessageServiceMockRecorder) SendMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*MockSchedulerMessageService)(nil).SendMessages))
}
