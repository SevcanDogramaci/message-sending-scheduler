// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/message_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/message_service.go -destination=internal/mocks/message_service.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/SevcanDogramaci/message-sending-scheduler/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// SetMessage mocks base method.
func (m *MockCacheRepository) SetMessage(metadata *model.TransferMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessage", metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessage indicates an expected call of SetMessage.
func (mr *MockCacheRepositoryMockRecorder) SetMessage(metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessage", reflect.TypeOf((*MockCacheRepository)(nil).SetMessage), metadata)
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// GetMessagesByStatus mocks base method.
func (m *MockMessageRepository) GetMessagesByStatus(status model.Status, limit int) ([]*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByStatus", status, limit)
	ret0, _ := ret[0].([]*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByStatus indicates an expected call of GetMessagesByStatus.
func (mr *MockMessageRepositoryMockRecorder) GetMessagesByStatus(status, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByStatus", reflect.TypeOf((*MockMessageRepository)(nil).GetMessagesByStatus), status, limit)
}

// UpdateMessageStatus mocks base method.
func (m *MockMessageRepository) UpdateMessageStatus(msg *model.Message, status model.Status) (*model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageStatus", msg, status)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessageStatus indicates an expected call of UpdateMessageStatus.
func (mr *MockMessageRepositoryMockRecorder) UpdateMessageStatus(msg, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStatus", reflect.TypeOf((*MockMessageRepository)(nil).UpdateMessageStatus), msg, status)
}

// MockMessageClient is a mock of MessageClient interface.
type MockMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageClientMockRecorder
	isgomock struct{}
}

// MockMessageClientMockRecorder is the mock recorder for MockMessageClient.
type MockMessageClientMockRecorder struct {
	mock *MockMessageClient
}

// NewMockMessageClient creates a new mock instance.
func NewMockMessageClient(ctrl *gomock.Controller) *MockMessageClient {
	mock := &MockMessageClient{ctrl: ctrl}
	mock.recorder = &MockMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageClient) EXPECT() *MockMessageClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageClient) Send(message *model.Message) (*model.TransferMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", message)
	ret0, _ := ret[0].(*model.TransferMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageClientMockRecorder) Send(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageClient)(nil).Send), message)
}
